// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DatabaseContact.DatabaseContact;
using DatabaseContact.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace DatabaseContact.DatabaseContact.Configurations
{
    public partial class DebtConfiguration : IEntityTypeConfiguration<Debt>
    {
        public void Configure(EntityTypeBuilder<Debt> entity)
        {
            entity.HasKey(e => e.id).HasName("debt_PK");

            entity.ToTable("debt", tb =>
            {
                tb.HasComment("информация о долге (кредите)");
                tb.HasTrigger("debt_change");
                tb.HasTrigger("debt_insert");
                tb.HasTrigger("tr_debt_aiud");
            });

            entity.Property(e => e.id).HasComment("ID долга");
            entity.Property(e => e.EXTENTION_DT).HasComment("Дата пролонгации");
            entity.Property(e => e.R_BANK_REQUISITE_ID).HasComment("Ссылка на банковские реквизиты");
            entity.Property(e => e.R_CALC_RULE_ID).HasComment("ссылка на правило расчета остатков");
            entity.Property(e => e.account).HasComment("лицевой счет должника");
            entity.Property(e => e.agency_rate).HasComment("комиссия агента");
            entity.Property(e => e.annuity_pay).HasComment("суммa аннуитетного платежа");
            entity.Property(e => e.archive_dt).HasComment("Дата формирования заявки для п");
            entity.Property(e => e.basic_sum).HasComment("основной долг");
            entity.Property(e => e.city_name).HasComment("город выдачи");
            entity.Property(e => e.commission_sum).HasComment("комиссия");
            entity.Property(e => e.contract).HasComment("номер договора с банком");
            entity.Property(e => e.credit_date).HasComment("дата выдачи кредита");
            entity.Property(e => e.currency).HasComment("валюта");
            entity.Property(e => e.deadline).HasComment("крайний срок погашения");
            entity.Property(e => e.debt_dt).HasComment("дата расчета остатка");
            entity.Property(e => e.debt_exp_dt).HasComment("дата актуальности остатка");
            entity.Property(e => e.debt_sum).HasComment("cумма необходимая к погашению");
            entity.Property(e => e.debt_sum_extra).HasComment("переплата");
            entity.Property(e => e.dpd).HasComment("Количество дней просрочки");
            entity.Property(e => e.dsc).HasComment("комментарий");
            entity.Property(e => e.due_sum).HasComment("гос. пошлина");
            entity.Property(e => e.exp_basic_sum).HasComment("просроченный основной долг");
            entity.Property(e => e.exp_percent_sum).HasComment("просроченные проценты");
            entity.Property(e => e.ext_id).HasComment("ID в системе клиента");
            entity.Property(e => e.filial).HasComment("регион (словарь №39)");
            entity.Property(e => e.filial_new).HasComment("филиал (Словарь №61)");
            entity.Property(e => e.fine_sum).HasComment("единовременный штраф");
            entity.Property(e => e.flag_no_work).HasComment("признак отсутствия работы по д");
            entity.Property(e => e.flag_preventive).HasComment("флаг \"Профилактика\"");
            entity.Property(e => e.gmt).HasComment("часовой пояс (словарь №51)");
            entity.Property(e => e.id_).HasComment("ID в главной БД");
            entity.Property(e => e.int_color).HasComment("номер цвета, для внутреннего и");
            entity.Property(e => e.interest_rate).HasComment("процентная ставка по кредиту");
            entity.Property(e => e.last_pay).HasComment("последний платеж");
            entity.Property(e => e.last_pay_sum).HasComment("сумма полследнего платежа");
            entity.Property(e => e.law_act_flag).HasComment("указывает, что есть судебное д");
            entity.Property(e => e.law_exec_flag).HasComment("указывает, что есть ИП");
            entity.Property(e => e.load_dt).HasComment("дата загрузки");
            entity.Property(e => e.lock_cnt).HasComment("кол-во обработок должника в ca");
            entity.Property(e => e.lock_dt).HasComment("дата локирования");
            entity.Property(e => e.mark1).HasComment("словарь №101 (атрибут, доступн");
            entity.Property(e => e.mark2).HasComment("словарь №102 (атрибут, доступн");
            entity.Property(e => e.min_sum).HasComment("возможная минимальная сумма пл");
            entity.Property(e => e.name).HasComment("название продукта");
            entity.Property(e => e.next_pay).HasComment("дата следующего платежа");
            entity.Property(e => e.next_pay_sum).HasComment("сумма следующего платежа");
            entity.Property(e => e.offer_text).HasComment("предложение по дальнейшей рабо");
            entity.Property(e => e.parent_id).HasComment("ссылка на person");
            entity.Property(e => e.penalty_sum).HasComment("штрафы");
            entity.Property(e => e.peni_sum).HasComment("пени");
            entity.Property(e => e.percent_sum).HasComment("проценты");
            entity.Property(e => e.pos_name).HasComment("точка продаж");
            entity.Property(e => e.prev_state).HasComment("предыдущее состояние (словарь ");
            entity.Property(e => e.r_calc_id).HasComment("ссылка последний на платеж, из");
            entity.Property(e => e.r_lock_user_id).HasComment("пользователь call-центра, локи");
            entity.Property(e => e.r_portfolio_id).HasComment("ссылка на портфель");
            entity.Property(e => e.reason).HasComment("причина возникновения задолжен");
            entity.Property(e => e.reason_status)
            .HasDefaultValueSql("((0))")
            .HasComment("причина смены статуса");
            entity.Property(e => e.rep_text).HasComment("результат работы с должником");
            entity.Property(e => e.start_date).HasComment("дата выхода на просрочку");
            entity.Property(e => e.start_sum).HasComment("начальная cумма, необходимая к");
            entity.Property(e => e.state).HasComment("состояние (словарь №29)");
            entity.Property(e => e.status).HasComment("статус (словарь №6)");
            entity.Property(e => e.stock).HasComment("акция");
            entity.Property(e => e.sum_on_bank_account).HasComment("суммa остатка на счете заемщик");
            entity.Property(e => e.total_rest).HasComment("остаток основного долга");
            entity.Property(e => e.total_sum).HasComment("полный размер кредита");
            entity.Property(e => e.typ).HasComment("тип продукта (словарь №11)");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Debt> entity);
    }
}
